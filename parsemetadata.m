%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                      %
% Matlab implementation of the X3 lossless audio compression protocol. %
%                                                                      %
% Copyright (C) 2012,2013 Mark Johnson                                 %
%                                                                      %
% This program is free software; you can redistribute it and/or modify %
% it under the terms of the GNU General Public License as published by %
% the Free Software Foundation, either version 3 of the License, or    %
% (at your option) any later version.                                  %
%                                                                      %
% This program is distributed in the hope that it will be useful,      %
% but WITHOUT ANY WARRANTY; without even the implied warranty of       %
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        %
% GNU General Public License for more details.                         %
%                                                                      %
% You should have received a copy of the GNU General Public License    %
% along with this program.  If not, see <http://www.gnu.org/licenses/>.%
%                                                                      %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function    [xid,wav] = parsemetadata(x,fname)

%     [xid,wav] = parsemetadata(x,fname)
%     Example function to extract the configuration information from a
%     metadata frame, x. This function responds to XML and WAV configuration
%     fields but assumes that all WAV configurations include X3 compression.
%     It would be easy enough to extend this to accept other codecs and/or
%     uncompressed data.
%     x is a structure of metadata strings generated by readx3xml.
%     fname is the file name to use as a base for the output files. Data-specific
%      suffixes will be added.
%
%     Returns:
%     xid is the file handle for the XML (id=0) metadata file.
%     wav is a cell array of wav file structures, one for each audio configuration.
%
%     GNU General Public License, see README.txt
%     mark johnson, SOI / Univ. St. Andrews
%     mj26@st-andrews.ac.uk
%     November 2012

xid = [] ; wav = {} ;
if ~isfield(x,'CFG'),
   return
end

% Loop through the CFG fields to find the configurations.
% For each configuration, extract the settings and open an output file

for k=1:length(x.CFG),
   c = x.CFG{k} ;
   id = sscanf(c.ID,'%d') ;
   switch(upper(c.FTYPE))
      case 'XML'
         % create an xml file for the metadata and write the standard opener
         xfname = [strtok(fname,'.') '.xml'] ;
         xid = fopen(xfname,'wt') ;
         if xid<=0,
            fprintf(' Unable to open file %s for writing\n',xfname) ;
            return
         end
         fprintf(xid,'<?xml version="1.0" encoding="US-ASCII" ?>\n') ;

   	case 'WAV',
         % for each audio configuration, extract the sampling rate,
         % block length and number of channels
         % First set default values in case a field is missing
         nch = 1 ; fs = 1 ; N = 20 ;
         
         if ~isfield(c,'SUFFIX'),
            c.SUFFIX = 'wav' ;
         end
         if isfield(c,'FS'),
            if isstruct(c.FS),
               c.FS = c.FS.FS ;
            end
            fs = sscanf(c.FS,'%d') ;
         end
         if isfield(c,'NCH'),
            nch = sscanf(c.NCH,'%d') ;
         end
         if isfield(c,'CODEC'),
            N = sscanf(c.CODEC.BLKLEN,'%d') ;
         end
         wname = [strtok(fname,'.'),'u.',c.SUFFIX] ;
         wav{id} = wavopen(wname,fs,nch) ;
         wav{id}.N = N ;
   end
end
